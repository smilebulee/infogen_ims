version: "3"

# 윈도우에서 볼륨 지정시 FATAL: data directory "/var/lib/postgresql/data" has wrong ownership 에러 발생하면  아래 스크립트로 도커에 볼류생성한 후 volumes: 태그 등록 후 사용
# docker volume create --name data-postgressql --driver local
# C:\workspace>docker volume create --driver local -o o=bind -o type=none -o device=/c/workspace/infogen_ims/ifg_front src-front

services:


  #mariadb(test)
  #  postgres:
  #    image: mariadb:latest
  #####    container_name: mariadb
  #    volumes:
  #      - data-postgressql:/var/lib/mysql
  #    environment:
  #      - MYSQL_DATABASE=IFG_IMS
  #      - MYSQL_USER=ims2
  #      - MYSQL_PASSWORD=1234
  #      - MYSQL_ROOT_PASSWORD=infogen
  #      MYSQL_ROOT_PASSWORD: 'infogen'
  #      MYSQL_USER : 'ims2'
  #      MYSQL_PASSWORD : '1234'
  #      MYSQL_DATABASE : 'IFG_IMS'
  #    ports:
  #      - "3306:3306"
  #
  #  mariadb:
  #    image: mariadb:latest
  #    restart: always
  #    environment:
  #      MYSQL_ROOT_PASSWORD: 'infogen'
  #    volumes:
  #      - data-postgressql:/var/lib/mysql
  #    ports:
  #      - '3306:3306'
  # front ui
  front:
    build: "./ifg_front"

    ports:
      - "80:8000"
    links:
      - emp_api
      - prj_api
      #      - postgres
      - skil_api
      - cmm_api
      #      - cnc_api
      - dili_api
    #      - eval_api
    #      - kpi_api
    #      - stat_api
    #      - site_api
    environment:
      - DJANGO_DB_HOST=112.220.26.195
      - DJANGO_DB_PORT=5432
      - DJANGO_DB_NAME=ifg_ims
      - DJANGO_DB_USERNAME=infogen
      - DJANGO_DB_PASSWORD=infogen
  #   volumes:
  #     - //c/workspace/infogen_ims/ifg_front:/usr/src/app
  # 1.직원관리
  emp_api:
    build: "./api_containers/emp/api"     # Dockerfile의 경로
    ports:
      - "5001:5001"     # 로컬의 5001포트로 요청일 들어오면 emp_api 컨테이너의 5001 포트로 연결
    environment:
      - SPRING_PROFILES_ACTIVE=local      # 이미지 생성시 세팅될 환경변수들
      - SPRING_APPLICATION_NAME=emp_api
      - SIDECAR_PORT=5001
      - MYSQL_HOST=112.220.26.195
      - MYSQL_ROOT_PASSWORD=infogen
      - MYSQL_PORT=3306
      - MYSQL_USER=ims2
      - MYSQL_PASSWORD=1234
      - MYSQL_DATABASE=IFG_IMS
      - TZ=Asia/Seoul

  # 2.프로젝트 관리
  prj_api:
    build: "./api_containers/prj/api"
    ports:
      - "5002:5002"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_APPLICATION_NAME=prj_api
      - SIDECAR_PORT=5002
      - MYSQL_HOST=112.220.26.195
      - MYSQL_ROOT_PASSWORD=infogen
      - MYSQL_PORT=3306
      - MYSQL_USER=ims2
      - MYSQL_PASSWORD=1234
      - MYSQL_DATABASE=IFG_IMS
      - TZ=Asia/Seoul

  # 3.skill 관리
  skil_api:
    build: "./api_containers/skil/api"
    ports:
      - "5003:5003"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_APPLICATION_NAME=skil_api
      - SIDECAR_PORT=5003
      - MYSQL_HOST=112.220.26.195
      - MYSQL_ROOT_PASSWORD=infogen
      - MYSQL_PORT=3306
      - MYSQL_USER=ims2
      - MYSQL_PASSWORD=1234
      - MYSQL_DATABASE=IFG_IMS
      - TZ=Asia/Seoul

  cmm_api:
    build: "./api_containers/cmm/api"
    ports:
      - "5004:5004"
    links:
      - cmm_db
    environment:
      - SPRING_PROFILES_ACTIVE=local      # 이미지 생성시 세팅될 환경변수들
      - SPRING_APPLICATION_NAME=cmm_api
      - SIDECAR_PORT=5004
  cmm_db:
    build: "./api_containers/cmm/db"

  # 5.접속 관리
  #  cnc_api:
  #    build: "./api_containers/cnc/api"
  #    ports:
  #      - "5005:5005"
  #    links:
  #      - cnc_db
  #  cnc_db:
  #    build: "./api_containers/cnc/db"

  # 6.근태 관리
  dili_api:
    build: "./api_containers/dili/api"     # Dockerfile의 경로
    ports:
      - "5006:5006"     # 로컬의 5001포트로 요청일 들어오면 dili_api 컨테이너의 5006 포트로 연결
    environment:
      - SPRING_PROFILES_ACTIVE=local      # 이미지 생성시 세팅될 환경변수들
      - SPRING_APPLICATION_NAME=dili_api
      - SIDECAR_PORT=5006
      - MYSQL_HOST=112.220.26.195
      - MYSQL_ROOT_PASSWORD=infogen
      - MYSQL_PORT=3306
      - MYSQL_USER=ims2
      - MYSQL_PASSWORD=1234
      - MYSQL_DATABASE=IFG_IMS
      - TZ=Asia/Seoul

  #  # 7.평가 관리
  #  eval_api:
  #    build: "./api_containers/eval/api"
  #    ports:
  #      - "5007:5007"
  #    links:
  #      - eval_db
  #  eval_db:
  #    build: "./api_containers/eval/db"
  #
  #  # 8. kpi 관리
  #  kpi_api:
  #    build: "./api_containers/kpi/api"
  #    ports:
  #      - "5008:5008"
  #    links:
  #      - kpi_db
  #  kpi_db:
  #    build: "./api_containers/kpi/db"

  # 9.현황 관리
  #  stat_api:
  #    build: "./api_containers/stat/api"
  #    ports:
  #      - "5009:5009"
  #    links:
  #      - stat_db
  #  stat_db:
  #    build: "./api_containers/stat/db"

  # 10.사이트맵 관리
#  site_api:
#    build: "./api_containers/site/api"
#    ports:
#      - "5010:5010"
#    links:
#      - site_db
#  site_db:
#    build: "./api_containers/site/db"


